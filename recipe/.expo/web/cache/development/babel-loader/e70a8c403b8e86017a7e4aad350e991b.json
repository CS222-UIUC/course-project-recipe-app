{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nexport default function useFocusedListenersChildrenAdapter(_ref) {\n  var navigation = _ref.navigation,\n      focusedListeners = _ref.focusedListeners;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      addListener = _React$useContext.addListener;\n\n  var listener = React.useCallback(function (callback) {\n    if (navigation.isFocused()) {\n      for (var _listener of focusedListeners) {\n        var _listener2 = _listener(callback),\n            handled = _listener2.handled,\n            result = _listener2.result;\n\n        if (handled) {\n          return {\n            handled: handled,\n            result: result\n          };\n        }\n      }\n\n      return {\n        handled: true,\n        result: callback(navigation)\n      };\n    } else {\n      return {\n        handled: false,\n        result: null\n      };\n    }\n  }, [focusedListeners, navigation]);\n  React.useEffect(function () {\n    return addListener === null || addListener === void 0 ? void 0 : addListener('focus', listener);\n  }, [addListener, listener]);\n}","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,wBAAP;AAcA,eAAe,SAASC,kCAAT,OAGH;EAAA,IAFVC,UAEU,QAFVA,UAEU;EAAA,IADVC,gBACU,QADVA,gBACU;;EACV,wBAAwBJ,KAAK,CAACK,UAANL,CAAiBC,wBAAjBD,CAAxB;EAAA,IAAQM,WAAR,qBAAQA,WAAR;;EAEA,IAAMC,QAAQ,GAAGP,KAAK,CAACQ,WAANR,CACdS,kBAAD,EAA8C;IAC5C,IAAIN,UAAU,CAACO,SAAXP,EAAJ,EAA4B;MAC1B,KAAK,IAAMI,SAAX,IAAuBH,gBAAvB,EAAyC;QACvC,iBAA4BG,SAAQ,CAACE,QAAD,CAApC;QAAA,IAAQE,OAAR,cAAQA,OAAR;QAAA,IAAiBC,MAAjB,cAAiBA,MAAjB;;QAEA,IAAID,OAAJ,EAAa;UACX,OAAO;YAAEA,OAAF,EAAEA,OAAF;YAAWC;UAAX,CAAP;QACD;MACF;;MAED,OAAO;QAAED,OAAO,EAAE,IAAX;QAAiBC,MAAM,EAAEH,QAAQ,CAACN,UAAD;MAAjC,CAAP;IATF,OAUO;MACL,OAAO;QAAEQ,OAAO,EAAE,KAAX;QAAkBC,MAAM,EAAE;MAA1B,CAAP;IACD;EAdY,GAgBf,CAACR,gBAAD,EAAmBD,UAAnB,CAhBeH,CAAjB;EAmBAA,KAAK,CAACa,SAANb,CACE;IAAA,OAAMM,WAAN,SAAMA,eAAN,WAAMA,GAAN,MAAMA,cAAW,CAAG,OAAH,EAAYC,QAAZ,CAAjB;EAAA,CADFP,EAEE,CAACM,WAAD,EAAcC,QAAd,CAFFP;AAID","names":["React","NavigationBuilderContext","useFocusedListenersChildrenAdapter","navigation","focusedListeners","useContext","addListener","listener","useCallback","callback","isFocused","handled","result","useEffect"],"sources":["useFocusedListenersChildrenAdapter.tsx"],"sourcesContent":["import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(\n    () => addListener?.('focus', listener),\n    [addListener, listener]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}